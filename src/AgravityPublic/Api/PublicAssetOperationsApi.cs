/*
 * Agravity OpenAPI Documentation - Public Functions
 *
 * <h1>Agravity API Reference</h1>This is the public API description of Agravity GmbH.<br/><h2>Resources</h2><ul> <li>Collection type management</li> <li>Collections management</li> <li>Assets management</li> <li>Assets operations</li> <li>Assets publishing</li> <li>Collection Sharing (consume share)</li> <li>Secure Upload (validate + upload file)</li> <li>Download ZIP</li> <li>Search</li> <li>General management</li></ul><h2> Operations</h2>Agravity API performs the following operations:<ul> <li>List / get single collection types</li> <li>List / get single collections</li> <li>List / get single  assets</li> <li>Operations on assets like: blobs, rotate, resize, similar, collections, customfields, download</li> <li>List / get single published asset</li> <li>Search for assets or collections</li> <li>Get version of deployment</li></ul><br/><b>API key is needed to access these endpoints.</b><br/><br/>Copyright Â© Agravity GmbH 2022. All Rights Reserved
 *
 * The version of the OpenAPI document: 4.6.0
 * Contact: office@agravity.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using AgravityPublic.Client;
using AgravityPublic.Model;

namespace AgravityPublic.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPublicAssetOperationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint lets you resize/modify the image asset according to the given parameter(s).
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream HttpAssetImageEdit (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint lets you resize/modify the image asset according to the given parameter(s).
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> HttpAssetImageEditWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint lets you rotate an image or video clockwise in 90 degrees steps.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <returns>Asset</returns>
        Asset HttpAssetImageRotateClockwise (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint lets you rotate an image or video clockwise in 90 degrees steps.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <returns>ApiResponse of Asset</returns>
        ApiResponse<Asset> HttpAssetImageRotateClockwiseWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint lets you resize/modify the image asset according to the given parameter(s).
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream HttpAssetResize (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint lets you resize/modify the image asset according to the given parameter(s).
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> HttpAssetResizeWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint is only for active image-assets (asset-type=image) and given perhash property. It compares against all other image assets and calculates distances for similar images.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <returns>List<PerHashResult></returns>
        List<PerHashResult> HttpAssetsGetSimilarById (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint is only for active image-assets (asset-type=image) and given perhash property. It compares against all other image assets and calculates distances for similar images.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <returns>ApiResponse of List<PerHashResult></returns>
        ApiResponse<List<PerHashResult>> HttpAssetsGetSimilarByIdWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint checks, if an asset exists and returns the url for the requested blob.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="c">\&quot;t\&quot; for thumbnail (default); \&quot;o\&quot; for optimized; \&quot;i\&quot; for internal.</param>
        /// <returns>AssetBlob</returns>
        AssetBlob HttpGetAssetBlob (string id, string c);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint checks, if an asset exists and returns the url for the requested blob.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="c">\&quot;t\&quot; for thumbnail (default); \&quot;o\&quot; for optimized; \&quot;i\&quot; for internal.</param>
        /// <returns>ApiResponse of AssetBlob</returns>
        ApiResponse<AssetBlob> HttpGetAssetBlobWithHttpInfo (string id, string c);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all collections of a specific asset.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <returns>List<Collection></returns>
        List<Collection> HttpGetAssetCollectionsById (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all collections of a specific asset.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <returns>ApiResponse of List<Collection></returns>
        ApiResponse<List<Collection>> HttpGetAssetCollectionsByIdWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint is similar to GetAssetBlob but with ContentDistribution and filename to let browser download the content.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="c">\&quot;t\&quot; for thumbnail (default); \&quot;o\&quot; for optimized; \&quot;i\&quot; for internal. (optional)</param>
        /// <returns>AssetBlob</returns>
        AssetBlob HttpGetAssetDownload (string id, string c = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint is similar to GetAssetBlob but with ContentDistribution and filename to let browser download the content.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="c">\&quot;t\&quot; for thumbnail (default); \&quot;o\&quot; for optimized; \&quot;i\&quot; for internal. (optional)</param>
        /// <returns>ApiResponse of AssetBlob</returns>
        ApiResponse<AssetBlob> HttpGetAssetDownloadWithHttpInfo (string id, string c = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint lets you resize/modify the image asset according to the given parameter(s).
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> HttpAssetImageEditAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint lets you resize/modify the image asset according to the given parameter(s).
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HttpAssetImageEditWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint lets you rotate an image or video clockwise in 90 degrees steps.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Asset</returns>
        System.Threading.Tasks.Task<Asset> HttpAssetImageRotateClockwiseAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint lets you rotate an image or video clockwise in 90 degrees steps.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Asset>> HttpAssetImageRotateClockwiseWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint lets you resize/modify the image asset according to the given parameter(s).
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> HttpAssetResizeAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint lets you resize/modify the image asset according to the given parameter(s).
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HttpAssetResizeWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint is only for active image-assets (asset-type=image) and given perhash property. It compares against all other image assets and calculates distances for similar images.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<PerHashResult></returns>
        System.Threading.Tasks.Task<List<PerHashResult>> HttpAssetsGetSimilarByIdAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint is only for active image-assets (asset-type=image) and given perhash property. It compares against all other image assets and calculates distances for similar images.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;PerHashResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PerHashResult>>> HttpAssetsGetSimilarByIdWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint checks, if an asset exists and returns the url for the requested blob.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="c">\&quot;t\&quot; for thumbnail (default); \&quot;o\&quot; for optimized; \&quot;i\&quot; for internal.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AssetBlob</returns>
        System.Threading.Tasks.Task<AssetBlob> HttpGetAssetBlobAsync (string id, string c, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint checks, if an asset exists and returns the url for the requested blob.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="c">\&quot;t\&quot; for thumbnail (default); \&quot;o\&quot; for optimized; \&quot;i\&quot; for internal.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AssetBlob)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetBlob>> HttpGetAssetBlobWithHttpInfoAsync (string id, string c, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all collections of a specific asset.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Collection></returns>
        System.Threading.Tasks.Task<List<Collection>> HttpGetAssetCollectionsByIdAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all collections of a specific asset.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Collection>>> HttpGetAssetCollectionsByIdWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint is similar to GetAssetBlob but with ContentDistribution and filename to let browser download the content.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="c">\&quot;t\&quot; for thumbnail (default); \&quot;o\&quot; for optimized; \&quot;i\&quot; for internal. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AssetBlob</returns>
        System.Threading.Tasks.Task<AssetBlob> HttpGetAssetDownloadAsync (string id, string c = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint is similar to GetAssetBlob but with ContentDistribution and filename to let browser download the content.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="c">\&quot;t\&quot; for thumbnail (default); \&quot;o\&quot; for optimized; \&quot;i\&quot; for internal. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AssetBlob)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetBlob>> HttpGetAssetDownloadWithHttpInfoAsync (string id, string c = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PublicAssetOperationsApi : IPublicAssetOperationsApi
    {
        private AgravityPublic.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicAssetOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PublicAssetOperationsApi(String basePath)
        {
            this.Configuration = new AgravityPublic.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AgravityPublic.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicAssetOperationsApi"/> class
        /// </summary>
        /// <returns></returns>
        public PublicAssetOperationsApi()
        {
            this.Configuration = AgravityPublic.Client.Configuration.Default;

            ExceptionFactory = AgravityPublic.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicAssetOperationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PublicAssetOperationsApi(AgravityPublic.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AgravityPublic.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AgravityPublic.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AgravityPublic.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AgravityPublic.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  This endpoint lets you resize/modify the image asset according to the given parameter(s).
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream HttpAssetImageEdit (string id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = HttpAssetImageEditWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This endpoint lets you resize/modify the image asset according to the given parameter(s).
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> HttpAssetImageEditWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicAssetOperationsApi->HttpAssetImageEdit");

            var localVarPath = "/assets/{id}/imageedit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/xyz",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpAssetImageEdit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  This endpoint lets you resize/modify the image asset according to the given parameter(s).
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> HttpAssetImageEditAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await HttpAssetImageEditWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This endpoint lets you resize/modify the image asset according to the given parameter(s).
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HttpAssetImageEditWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicAssetOperationsApi->HttpAssetImageEdit");

            var localVarPath = "/assets/{id}/imageedit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/xyz",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpAssetImageEdit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  This endpoint lets you rotate an image or video clockwise in 90 degrees steps.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <returns>Asset</returns>
        public Asset HttpAssetImageRotateClockwise (string id)
        {
             ApiResponse<Asset> localVarResponse = HttpAssetImageRotateClockwiseWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This endpoint lets you rotate an image or video clockwise in 90 degrees steps.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <returns>ApiResponse of Asset</returns>
        public ApiResponse<Asset> HttpAssetImageRotateClockwiseWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicAssetOperationsApi->HttpAssetImageRotateClockwise");

            var localVarPath = "/assets/{id}/rotate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpAssetImageRotateClockwise", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Asset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Asset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Asset)));
        }

        /// <summary>
        ///  This endpoint lets you rotate an image or video clockwise in 90 degrees steps.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Asset</returns>
        public async System.Threading.Tasks.Task<Asset> HttpAssetImageRotateClockwiseAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Asset> localVarResponse = await HttpAssetImageRotateClockwiseWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This endpoint lets you rotate an image or video clockwise in 90 degrees steps.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Asset>> HttpAssetImageRotateClockwiseWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicAssetOperationsApi->HttpAssetImageRotateClockwise");

            var localVarPath = "/assets/{id}/rotate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpAssetImageRotateClockwise", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Asset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Asset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Asset)));
        }

        /// <summary>
        ///  This endpoint lets you resize/modify the image asset according to the given parameter(s).
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream HttpAssetResize (string id)
        {
             ApiResponse<System.IO.Stream> localVarResponse = HttpAssetResizeWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This endpoint lets you resize/modify the image asset according to the given parameter(s).
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> HttpAssetResizeWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicAssetOperationsApi->HttpAssetResize");

            var localVarPath = "/assets/{id}/resize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/xyz",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpAssetResize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  This endpoint lets you resize/modify the image asset according to the given parameter(s).
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> HttpAssetResizeAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await HttpAssetResizeWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This endpoint lets you resize/modify the image asset according to the given parameter(s).
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> HttpAssetResizeWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicAssetOperationsApi->HttpAssetResize");

            var localVarPath = "/assets/{id}/resize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/xyz",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpAssetResize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  This endpoint is only for active image-assets (asset-type=image) and given perhash property. It compares against all other image assets and calculates distances for similar images.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <returns>List<PerHashResult></returns>
        public List<PerHashResult> HttpAssetsGetSimilarById (string id)
        {
             ApiResponse<List<PerHashResult>> localVarResponse = HttpAssetsGetSimilarByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This endpoint is only for active image-assets (asset-type=image) and given perhash property. It compares against all other image assets and calculates distances for similar images.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <returns>ApiResponse of List<PerHashResult></returns>
        public ApiResponse<List<PerHashResult>> HttpAssetsGetSimilarByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicAssetOperationsApi->HttpAssetsGetSimilarById");

            var localVarPath = "/assets/{id}/similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpAssetsGetSimilarById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PerHashResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PerHashResult>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PerHashResult>)));
        }

        /// <summary>
        ///  This endpoint is only for active image-assets (asset-type=image) and given perhash property. It compares against all other image assets and calculates distances for similar images.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<PerHashResult></returns>
        public async System.Threading.Tasks.Task<List<PerHashResult>> HttpAssetsGetSimilarByIdAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<PerHashResult>> localVarResponse = await HttpAssetsGetSimilarByIdWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This endpoint is only for active image-assets (asset-type=image) and given perhash property. It compares against all other image assets and calculates distances for similar images.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;PerHashResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PerHashResult>>> HttpAssetsGetSimilarByIdWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicAssetOperationsApi->HttpAssetsGetSimilarById");

            var localVarPath = "/assets/{id}/similar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpAssetsGetSimilarById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PerHashResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PerHashResult>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PerHashResult>)));
        }

        /// <summary>
        ///  This endpoint checks, if an asset exists and returns the url for the requested blob.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="c">\&quot;t\&quot; for thumbnail (default); \&quot;o\&quot; for optimized; \&quot;i\&quot; for internal.</param>
        /// <returns>AssetBlob</returns>
        public AssetBlob HttpGetAssetBlob (string id, string c)
        {
             ApiResponse<AssetBlob> localVarResponse = HttpGetAssetBlobWithHttpInfo(id, c);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This endpoint checks, if an asset exists and returns the url for the requested blob.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="c">\&quot;t\&quot; for thumbnail (default); \&quot;o\&quot; for optimized; \&quot;i\&quot; for internal.</param>
        /// <returns>ApiResponse of AssetBlob</returns>
        public ApiResponse<AssetBlob> HttpGetAssetBlobWithHttpInfo (string id, string c)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicAssetOperationsApi->HttpGetAssetBlob");
            // verify the required parameter 'c' is set
            if (c == null)
                throw new ApiException(400, "Missing required parameter 'c' when calling PublicAssetOperationsApi->HttpGetAssetBlob");

            var localVarPath = "/assets/{id}/blobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (c != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "c", c)); // query parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpGetAssetBlob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetBlob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetBlob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetBlob)));
        }

        /// <summary>
        ///  This endpoint checks, if an asset exists and returns the url for the requested blob.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="c">\&quot;t\&quot; for thumbnail (default); \&quot;o\&quot; for optimized; \&quot;i\&quot; for internal.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AssetBlob</returns>
        public async System.Threading.Tasks.Task<AssetBlob> HttpGetAssetBlobAsync (string id, string c, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AssetBlob> localVarResponse = await HttpGetAssetBlobWithHttpInfoAsync(id, c, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This endpoint checks, if an asset exists and returns the url for the requested blob.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="c">\&quot;t\&quot; for thumbnail (default); \&quot;o\&quot; for optimized; \&quot;i\&quot; for internal.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AssetBlob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetBlob>> HttpGetAssetBlobWithHttpInfoAsync (string id, string c, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicAssetOperationsApi->HttpGetAssetBlob");
            // verify the required parameter 'c' is set
            if (c == null)
                throw new ApiException(400, "Missing required parameter 'c' when calling PublicAssetOperationsApi->HttpGetAssetBlob");

            var localVarPath = "/assets/{id}/blobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (c != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "c", c)); // query parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpGetAssetBlob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetBlob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetBlob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetBlob)));
        }

        /// <summary>
        ///  Returns all collections of a specific asset.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <returns>List<Collection></returns>
        public List<Collection> HttpGetAssetCollectionsById (string id)
        {
             ApiResponse<List<Collection>> localVarResponse = HttpGetAssetCollectionsByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all collections of a specific asset.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <returns>ApiResponse of List<Collection></returns>
        public ApiResponse<List<Collection>> HttpGetAssetCollectionsByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicAssetOperationsApi->HttpGetAssetCollectionsById");

            var localVarPath = "/assets/{id}/collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpGetAssetCollectionsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Collection>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Collection>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Collection>)));
        }

        /// <summary>
        ///  Returns all collections of a specific asset.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Collection></returns>
        public async System.Threading.Tasks.Task<List<Collection>> HttpGetAssetCollectionsByIdAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Collection>> localVarResponse = await HttpGetAssetCollectionsByIdWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all collections of a specific asset.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Collection>>> HttpGetAssetCollectionsByIdWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicAssetOperationsApi->HttpGetAssetCollectionsById");

            var localVarPath = "/assets/{id}/collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpGetAssetCollectionsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Collection>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Collection>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Collection>)));
        }

        /// <summary>
        ///  This endpoint is similar to GetAssetBlob but with ContentDistribution and filename to let browser download the content.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="c">\&quot;t\&quot; for thumbnail (default); \&quot;o\&quot; for optimized; \&quot;i\&quot; for internal. (optional)</param>
        /// <returns>AssetBlob</returns>
        public AssetBlob HttpGetAssetDownload (string id, string c = default(string))
        {
             ApiResponse<AssetBlob> localVarResponse = HttpGetAssetDownloadWithHttpInfo(id, c);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This endpoint is similar to GetAssetBlob but with ContentDistribution and filename to let browser download the content.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="c">\&quot;t\&quot; for thumbnail (default); \&quot;o\&quot; for optimized; \&quot;i\&quot; for internal. (optional)</param>
        /// <returns>ApiResponse of AssetBlob</returns>
        public ApiResponse<AssetBlob> HttpGetAssetDownloadWithHttpInfo (string id, string c = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicAssetOperationsApi->HttpGetAssetDownload");

            var localVarPath = "/assets/{id}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (c != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "c", c)); // query parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpGetAssetDownload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetBlob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetBlob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetBlob)));
        }

        /// <summary>
        ///  This endpoint is similar to GetAssetBlob but with ContentDistribution and filename to let browser download the content.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="c">\&quot;t\&quot; for thumbnail (default); \&quot;o\&quot; for optimized; \&quot;i\&quot; for internal. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AssetBlob</returns>
        public async System.Threading.Tasks.Task<AssetBlob> HttpGetAssetDownloadAsync (string id, string c = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AssetBlob> localVarResponse = await HttpGetAssetDownloadWithHttpInfoAsync(id, c, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This endpoint is similar to GetAssetBlob but with ContentDistribution and filename to let browser download the content.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the asset.</param>
        /// <param name="c">\&quot;t\&quot; for thumbnail (default); \&quot;o\&quot; for optimized; \&quot;i\&quot; for internal. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AssetBlob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetBlob>> HttpGetAssetDownloadWithHttpInfoAsync (string id, string c = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicAssetOperationsApi->HttpGetAssetDownload");

            var localVarPath = "/assets/{id}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (c != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "c", c)); // query parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpGetAssetDownload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetBlob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetBlob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetBlob)));
        }

    }
}
