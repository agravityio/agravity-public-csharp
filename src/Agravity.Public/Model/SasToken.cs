/*
 * Agravity OpenAPI Documentation - Public Functions
 *
 * <h1>Agravity API Reference</h1>This is the public API description of Agravity GmbH.<br/><h2>Resources</h2><ul> <li>Collection type management</li> <li>Collections management</li> <li>Assets management</li> <li>Assets operations</li> <li>Assets publishing</li> <li>Collection Sharing (consume share)</li> <li>Secure Upload (validate + upload file)</li> <li>Download ZIP</li> <li>Search</li> <li>General management</li></ul><h2> Operations</h2>Agravity API performs the following operations:<ul> <li>List / get single collection types</li> <li>List / get single collections</li> <li>List / get single  assets</li> <li>Operations on assets like: blobs, rotate, resize, similar, collections, customfields, download</li> <li>List / get single published asset</li> <li>Search for assets or collections</li> <li>Get version of deployment</li></ul><br/><b>API key is needed to access these endpoints.</b><br/><br/>Copyright Â© Agravity GmbH 2023. All Rights Reserved
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: office@agravity.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agravity.Public.Client.OpenAPIDateConverter;

namespace Agravity.Public.Model
{
    /// <summary>
    /// SasToken
    /// </summary>
    [DataContract(Name = "sasToken")]
    public partial class SasToken : IEquatable<SasToken>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SasToken" /> class.
        /// </summary>
        /// <param name="token">token.</param>
        /// <param name="container">container.</param>
        /// <param name="blob">blob.</param>
        /// <param name="url">url.</param>
        /// <param name="fulltoken">fulltoken.</param>
        /// <param name="expires">expires.</param>
        public SasToken(string token = default(string), string container = default(string), string blob = default(string), string url = default(string), string fulltoken = default(string), DateTime expires = default(DateTime))
        {
            this.Token = token;
            this.Container = container;
            this.Blob = blob;
            this.Url = url;
            this.Fulltoken = fulltoken;
            this.Expires = expires;
        }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets Container
        /// </summary>
        [DataMember(Name = "container", EmitDefaultValue = false)]
        public string Container { get; set; }

        /// <summary>
        /// Gets or Sets Blob
        /// </summary>
        [DataMember(Name = "blob", EmitDefaultValue = false)]
        public string Blob { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Fulltoken
        /// </summary>
        [DataMember(Name = "fulltoken", EmitDefaultValue = false)]
        public string Fulltoken { get; set; }

        /// <summary>
        /// Gets or Sets Expires
        /// </summary>
        [DataMember(Name = "expires", EmitDefaultValue = false)]
        public DateTime Expires { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SasToken {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  Blob: ").Append(Blob).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Fulltoken: ").Append(Fulltoken).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SasToken);
        }

        /// <summary>
        /// Returns true if SasToken instances are equal
        /// </summary>
        /// <param name="input">Instance of SasToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SasToken input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Container == input.Container ||
                    (this.Container != null &&
                    this.Container.Equals(input.Container))
                ) && 
                (
                    this.Blob == input.Blob ||
                    (this.Blob != null &&
                    this.Blob.Equals(input.Blob))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Fulltoken == input.Fulltoken ||
                    (this.Fulltoken != null &&
                    this.Fulltoken.Equals(input.Fulltoken))
                ) && 
                (
                    this.Expires == input.Expires ||
                    (this.Expires != null &&
                    this.Expires.Equals(input.Expires))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.Container != null)
                {
                    hashCode = (hashCode * 59) + this.Container.GetHashCode();
                }
                if (this.Blob != null)
                {
                    hashCode = (hashCode * 59) + this.Blob.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.Fulltoken != null)
                {
                    hashCode = (hashCode * 59) + this.Fulltoken.GetHashCode();
                }
                if (this.Expires != null)
                {
                    hashCode = (hashCode * 59) + this.Expires.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
