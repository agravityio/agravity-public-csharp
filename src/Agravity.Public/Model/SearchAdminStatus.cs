/*
 * Agravity OpenAPI Documentation - Public Functions
 *
 * <h1>Agravity API Reference</h1>This is the public API description of Agravity GmbH.<br/><h2>Resources</h2><ul> <li>Collection type management</li> <li>Collections management</li> <li>Assets management</li> <li>Assets operations</li> <li>Assets publishing</li> <li>Collection Sharing (consume share)</li> <li>Secure Upload (validate + upload file)</li> <li>Download ZIP</li> <li>Search</li> <li>General management</li></ul><h2> Operations</h2>Agravity API performs the following operations:<ul> <li>List / get single collection types</li> <li>List / get single collections</li> <li>List / get single  assets</li> <li>Operations on assets like: blobs, rotate, resize, similar, collections, customfields, download</li> <li>List / get single published asset</li> <li>Search for assets or collections</li> <li>Get version of deployment</li></ul><br/><b>API key is needed to access these endpoints.</b><br/><br/>Copyright Â© Agravity GmbH 2024. All Rights Reserved
 *
 * The version of the OpenAPI document: 7.3.0
 * Contact: office@agravity.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Agravity.Public.Client.OpenAPIDateConverter;

namespace Agravity.Public.Model
{
    /// <summary>
    /// SearchAdminStatus
    /// </summary>
    [DataContract(Name = "searchAdminStatus")]
    public partial class SearchAdminStatus : IEquatable<SearchAdminStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchAdminStatus" /> class.
        /// </summary>
        /// <param name="index">index.</param>
        /// <param name="indexer">indexer.</param>
        /// <param name="datasource">datasource.</param>
        /// <param name="skillsets">skillsets.</param>
        public SearchAdminStatus(SearchAdminIndexStatus index = default(SearchAdminIndexStatus), SearchAdminIndexerStatus indexer = default(SearchAdminIndexerStatus), SearchAdminDataSourceStatus datasource = default(SearchAdminDataSourceStatus), List<SearchAdminSkillStatus> skillsets = default(List<SearchAdminSkillStatus>))
        {
            this.Index = index;
            this.Indexer = indexer;
            this.Datasource = datasource;
            this.Skillsets = skillsets;
        }

        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [DataMember(Name = "index", EmitDefaultValue = false)]
        public SearchAdminIndexStatus Index { get; set; }

        /// <summary>
        /// Gets or Sets Indexer
        /// </summary>
        [DataMember(Name = "indexer", EmitDefaultValue = false)]
        public SearchAdminIndexerStatus Indexer { get; set; }

        /// <summary>
        /// Gets or Sets Datasource
        /// </summary>
        [DataMember(Name = "datasource", EmitDefaultValue = false)]
        public SearchAdminDataSourceStatus Datasource { get; set; }

        /// <summary>
        /// Gets or Sets Skillsets
        /// </summary>
        [DataMember(Name = "skillsets", EmitDefaultValue = false)]
        public List<SearchAdminSkillStatus> Skillsets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchAdminStatus {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Indexer: ").Append(Indexer).Append("\n");
            sb.Append("  Datasource: ").Append(Datasource).Append("\n");
            sb.Append("  Skillsets: ").Append(Skillsets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchAdminStatus);
        }

        /// <summary>
        /// Returns true if SearchAdminStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchAdminStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchAdminStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.Indexer == input.Indexer ||
                    (this.Indexer != null &&
                    this.Indexer.Equals(input.Indexer))
                ) && 
                (
                    this.Datasource == input.Datasource ||
                    (this.Datasource != null &&
                    this.Datasource.Equals(input.Datasource))
                ) && 
                (
                    this.Skillsets == input.Skillsets ||
                    this.Skillsets != null &&
                    input.Skillsets != null &&
                    this.Skillsets.SequenceEqual(input.Skillsets)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Index != null)
                {
                    hashCode = (hashCode * 59) + this.Index.GetHashCode();
                }
                if (this.Indexer != null)
                {
                    hashCode = (hashCode * 59) + this.Indexer.GetHashCode();
                }
                if (this.Datasource != null)
                {
                    hashCode = (hashCode * 59) + this.Datasource.GetHashCode();
                }
                if (this.Skillsets != null)
                {
                    hashCode = (hashCode * 59) + this.Skillsets.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
