/*
 * Agravity OpenAPI Documentation - Public Functions
 *
 * <h1>Agravity API Reference</h1>This is the public API description of Agravity GmbH.<br/><h2>Resources</h2><ul> <li>Collection type management</li> <li>Collections management</li> <li>Assets management</li> <li>Assets operations</li> <li>Assets publishing</li> <li>Collection Sharing (consume share)</li> <li>Secure Upload (validate + upload file)</li> <li>Download ZIP</li> <li>Search</li> <li>General management</li></ul><h2> Operations</h2>Agravity API performs the following operations:<ul> <li>List / get single collection types</li> <li>List / get single collections</li> <li>List / get single  assets</li> <li>Operations on assets like: blobs, rotate, resize, similar, collections, customfields, download</li> <li>List / get single published asset</li> <li>Search for assets or collections</li> <li>Get version of deployment</li></ul><br/><b>API key is needed to access these endpoints.</b><br/><br/>Copyright Â© Agravity GmbH 2024. All Rights Reserved
 *
 * The version of the OpenAPI document: 8.0.0
 * Contact: office@agravity.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Agravity.Public.Client;
using Agravity.Public.Model;

namespace Agravity.Public.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPublicGeneralManagementApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the current version of the backend. To see if backend was updated or not.
        /// </remarks>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AgravityVersion</returns>
        AgravityVersion HttpAgravityVersionInfo(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the current version of the backend. To see if backend was updated or not.
        /// </remarks>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AgravityVersion</returns>
        ApiResponse<AgravityVersion> HttpAgravityVersionInfoWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint checks all deleted entities in the database until a specific date and returns the elements which are deleted.
        /// </remarks>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of the entity (e.g. &#39;asset&#39;, &#39;collection_type&#39;, &#39;collection_type&#39; (optional)</param>
        /// <param name="since">The date in the past since the entities are marked as deleted in the database. (optional)</param>
        /// <param name="until">The date in the past until the entities are marked as deleted in the database. (optional)</param>
        /// <param name="portalId">If the request comes from portal this is the indicator. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;DeletedEntities&gt;</returns>
        List<DeletedEntities> HttpGetDeletedEntities(string entityType = default(string), string since = default(string), string until = default(string), string portalId = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint checks all deleted entities in the database until a specific date and returns the elements which are deleted.
        /// </remarks>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of the entity (e.g. &#39;asset&#39;, &#39;collection_type&#39;, &#39;collection_type&#39; (optional)</param>
        /// <param name="since">The date in the past since the entities are marked as deleted in the database. (optional)</param>
        /// <param name="until">The date in the past until the entities are marked as deleted in the database. (optional)</param>
        /// <param name="portalId">If the request comes from portal this is the indicator. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;DeletedEntities&gt;</returns>
        ApiResponse<List<DeletedEntities>> HttpGetDeletedEntitiesWithHttpInfo(string entityType = default(string), string since = default(string), string until = default(string), string portalId = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Trigger the durable execution to continue
        /// </remarks>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">The instance ID of the durable function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AgravityInfoResponse</returns>
        AgravityInfoResponse HttpTriggerDurableContinue(string instanceId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Trigger the durable execution to continue
        /// </remarks>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">The instance ID of the durable function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AgravityInfoResponse</returns>
        ApiResponse<AgravityInfoResponse> HttpTriggerDurableContinueWithHttpInfo(string instanceId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Trigger the durable execution to continue
        /// </remarks>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">The instance ID of the durable function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AgravityInfoResponse</returns>
        AgravityInfoResponse HttpTriggerDurableScchTrainingDone(string instanceId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Trigger the durable execution to continue
        /// </remarks>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">The instance ID of the durable function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AgravityInfoResponse</returns>
        ApiResponse<AgravityInfoResponse> HttpTriggerDurableScchTrainingDoneWithHttpInfo(string instanceId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPublicGeneralManagementApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the current version of the backend. To see if backend was updated or not.
        /// </remarks>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgravityVersion</returns>
        System.Threading.Tasks.Task<AgravityVersion> HttpAgravityVersionInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the current version of the backend. To see if backend was updated or not.
        /// </remarks>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgravityVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgravityVersion>> HttpAgravityVersionInfoWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint checks all deleted entities in the database until a specific date and returns the elements which are deleted.
        /// </remarks>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of the entity (e.g. &#39;asset&#39;, &#39;collection_type&#39;, &#39;collection_type&#39; (optional)</param>
        /// <param name="since">The date in the past since the entities are marked as deleted in the database. (optional)</param>
        /// <param name="until">The date in the past until the entities are marked as deleted in the database. (optional)</param>
        /// <param name="portalId">If the request comes from portal this is the indicator. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DeletedEntities&gt;</returns>
        System.Threading.Tasks.Task<List<DeletedEntities>> HttpGetDeletedEntitiesAsync(string entityType = default(string), string since = default(string), string until = default(string), string portalId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint checks all deleted entities in the database until a specific date and returns the elements which are deleted.
        /// </remarks>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of the entity (e.g. &#39;asset&#39;, &#39;collection_type&#39;, &#39;collection_type&#39; (optional)</param>
        /// <param name="since">The date in the past since the entities are marked as deleted in the database. (optional)</param>
        /// <param name="until">The date in the past until the entities are marked as deleted in the database. (optional)</param>
        /// <param name="portalId">If the request comes from portal this is the indicator. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DeletedEntities&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeletedEntities>>> HttpGetDeletedEntitiesWithHttpInfoAsync(string entityType = default(string), string since = default(string), string until = default(string), string portalId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Trigger the durable execution to continue
        /// </remarks>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">The instance ID of the durable function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgravityInfoResponse</returns>
        System.Threading.Tasks.Task<AgravityInfoResponse> HttpTriggerDurableContinueAsync(string instanceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Trigger the durable execution to continue
        /// </remarks>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">The instance ID of the durable function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgravityInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgravityInfoResponse>> HttpTriggerDurableContinueWithHttpInfoAsync(string instanceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Trigger the durable execution to continue
        /// </remarks>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">The instance ID of the durable function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgravityInfoResponse</returns>
        System.Threading.Tasks.Task<AgravityInfoResponse> HttpTriggerDurableScchTrainingDoneAsync(string instanceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Trigger the durable execution to continue
        /// </remarks>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">The instance ID of the durable function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgravityInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgravityInfoResponse>> HttpTriggerDurableScchTrainingDoneWithHttpInfoAsync(string instanceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPublicGeneralManagementApi : IPublicGeneralManagementApiSync, IPublicGeneralManagementApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PublicGeneralManagementApi : IPublicGeneralManagementApi
    {
        private Agravity.Public.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicGeneralManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PublicGeneralManagementApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicGeneralManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PublicGeneralManagementApi(string basePath)
        {
            this.Configuration = Agravity.Public.Client.Configuration.MergeConfigurations(
                Agravity.Public.Client.GlobalConfiguration.Instance,
                new Agravity.Public.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Agravity.Public.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Agravity.Public.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Agravity.Public.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicGeneralManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PublicGeneralManagementApi(Agravity.Public.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Agravity.Public.Client.Configuration.MergeConfigurations(
                Agravity.Public.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Agravity.Public.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Agravity.Public.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Agravity.Public.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicGeneralManagementApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PublicGeneralManagementApi(Agravity.Public.Client.ISynchronousClient client, Agravity.Public.Client.IAsynchronousClient asyncClient, Agravity.Public.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Agravity.Public.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Agravity.Public.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Agravity.Public.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Agravity.Public.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Agravity.Public.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Get the current version of the backend. To see if backend was updated or not.
        /// </summary>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AgravityVersion</returns>
        public AgravityVersion HttpAgravityVersionInfo(int operationIndex = 0)
        {
            Agravity.Public.Client.ApiResponse<AgravityVersion> localVarResponse = HttpAgravityVersionInfoWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the current version of the backend. To see if backend was updated or not.
        /// </summary>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AgravityVersion</returns>
        public Agravity.Public.Client.ApiResponse<AgravityVersion> HttpAgravityVersionInfoWithHttpInfo(int operationIndex = 0)
        {
            Agravity.Public.Client.RequestOptions localVarRequestOptions = new Agravity.Public.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Agravity.Public.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Agravity.Public.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PublicGeneralManagementApi.HttpAgravityVersionInfo";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AgravityVersion>("/version", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HttpAgravityVersionInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the current version of the backend. To see if backend was updated or not.
        /// </summary>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgravityVersion</returns>
        public async System.Threading.Tasks.Task<AgravityVersion> HttpAgravityVersionInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Agravity.Public.Client.ApiResponse<AgravityVersion> localVarResponse = await HttpAgravityVersionInfoWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the current version of the backend. To see if backend was updated or not.
        /// </summary>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgravityVersion)</returns>
        public async System.Threading.Tasks.Task<Agravity.Public.Client.ApiResponse<AgravityVersion>> HttpAgravityVersionInfoWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Agravity.Public.Client.RequestOptions localVarRequestOptions = new Agravity.Public.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Agravity.Public.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Agravity.Public.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PublicGeneralManagementApi.HttpAgravityVersionInfo";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AgravityVersion>("/version", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HttpAgravityVersionInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  This endpoint checks all deleted entities in the database until a specific date and returns the elements which are deleted.
        /// </summary>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of the entity (e.g. &#39;asset&#39;, &#39;collection_type&#39;, &#39;collection_type&#39; (optional)</param>
        /// <param name="since">The date in the past since the entities are marked as deleted in the database. (optional)</param>
        /// <param name="until">The date in the past until the entities are marked as deleted in the database. (optional)</param>
        /// <param name="portalId">If the request comes from portal this is the indicator. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;DeletedEntities&gt;</returns>
        public List<DeletedEntities> HttpGetDeletedEntities(string entityType = default(string), string since = default(string), string until = default(string), string portalId = default(string), int operationIndex = 0)
        {
            Agravity.Public.Client.ApiResponse<List<DeletedEntities>> localVarResponse = HttpGetDeletedEntitiesWithHttpInfo(entityType, since, until, portalId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  This endpoint checks all deleted entities in the database until a specific date and returns the elements which are deleted.
        /// </summary>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of the entity (e.g. &#39;asset&#39;, &#39;collection_type&#39;, &#39;collection_type&#39; (optional)</param>
        /// <param name="since">The date in the past since the entities are marked as deleted in the database. (optional)</param>
        /// <param name="until">The date in the past until the entities are marked as deleted in the database. (optional)</param>
        /// <param name="portalId">If the request comes from portal this is the indicator. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;DeletedEntities&gt;</returns>
        public Agravity.Public.Client.ApiResponse<List<DeletedEntities>> HttpGetDeletedEntitiesWithHttpInfo(string entityType = default(string), string since = default(string), string until = default(string), string portalId = default(string), int operationIndex = 0)
        {
            Agravity.Public.Client.RequestOptions localVarRequestOptions = new Agravity.Public.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Agravity.Public.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Agravity.Public.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (entityType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Agravity.Public.Client.ClientUtils.ParameterToMultiMap("", "entity_type", entityType));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(Agravity.Public.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (until != null)
            {
                localVarRequestOptions.QueryParameters.Add(Agravity.Public.Client.ClientUtils.ParameterToMultiMap("", "until", until));
            }
            if (portalId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Agravity.Public.Client.ClientUtils.ParameterToMultiMap("", "portal_id", portalId));
            }

            localVarRequestOptions.Operation = "PublicGeneralManagementApi.HttpGetDeletedEntities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (function_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-functions-key", this.Configuration.GetApiKeyWithPrefix("x-functions-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DeletedEntities>>("/deleted", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HttpGetDeletedEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  This endpoint checks all deleted entities in the database until a specific date and returns the elements which are deleted.
        /// </summary>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of the entity (e.g. &#39;asset&#39;, &#39;collection_type&#39;, &#39;collection_type&#39; (optional)</param>
        /// <param name="since">The date in the past since the entities are marked as deleted in the database. (optional)</param>
        /// <param name="until">The date in the past until the entities are marked as deleted in the database. (optional)</param>
        /// <param name="portalId">If the request comes from portal this is the indicator. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DeletedEntities&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeletedEntities>> HttpGetDeletedEntitiesAsync(string entityType = default(string), string since = default(string), string until = default(string), string portalId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Agravity.Public.Client.ApiResponse<List<DeletedEntities>> localVarResponse = await HttpGetDeletedEntitiesWithHttpInfoAsync(entityType, since, until, portalId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  This endpoint checks all deleted entities in the database until a specific date and returns the elements which are deleted.
        /// </summary>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of the entity (e.g. &#39;asset&#39;, &#39;collection_type&#39;, &#39;collection_type&#39; (optional)</param>
        /// <param name="since">The date in the past since the entities are marked as deleted in the database. (optional)</param>
        /// <param name="until">The date in the past until the entities are marked as deleted in the database. (optional)</param>
        /// <param name="portalId">If the request comes from portal this is the indicator. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DeletedEntities&gt;)</returns>
        public async System.Threading.Tasks.Task<Agravity.Public.Client.ApiResponse<List<DeletedEntities>>> HttpGetDeletedEntitiesWithHttpInfoAsync(string entityType = default(string), string since = default(string), string until = default(string), string portalId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Agravity.Public.Client.RequestOptions localVarRequestOptions = new Agravity.Public.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Agravity.Public.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Agravity.Public.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (entityType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Agravity.Public.Client.ClientUtils.ParameterToMultiMap("", "entity_type", entityType));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(Agravity.Public.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (until != null)
            {
                localVarRequestOptions.QueryParameters.Add(Agravity.Public.Client.ClientUtils.ParameterToMultiMap("", "until", until));
            }
            if (portalId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Agravity.Public.Client.ClientUtils.ParameterToMultiMap("", "portal_id", portalId));
            }

            localVarRequestOptions.Operation = "PublicGeneralManagementApi.HttpGetDeletedEntities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (function_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-functions-key", this.Configuration.GetApiKeyWithPrefix("x-functions-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DeletedEntities>>("/deleted", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HttpGetDeletedEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Trigger the durable execution to continue
        /// </summary>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">The instance ID of the durable function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AgravityInfoResponse</returns>
        public AgravityInfoResponse HttpTriggerDurableContinue(string instanceId, int operationIndex = 0)
        {
            Agravity.Public.Client.ApiResponse<AgravityInfoResponse> localVarResponse = HttpTriggerDurableContinueWithHttpInfo(instanceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Trigger the durable execution to continue
        /// </summary>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">The instance ID of the durable function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AgravityInfoResponse</returns>
        public Agravity.Public.Client.ApiResponse<AgravityInfoResponse> HttpTriggerDurableContinueWithHttpInfo(string instanceId, int operationIndex = 0)
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new Agravity.Public.Client.ApiException(400, "Missing required parameter 'instanceId' when calling PublicGeneralManagementApi->HttpTriggerDurableContinue");
            }

            Agravity.Public.Client.RequestOptions localVarRequestOptions = new Agravity.Public.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Agravity.Public.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Agravity.Public.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instanceId", Agravity.Public.Client.ClientUtils.ParameterToString(instanceId)); // path parameter

            localVarRequestOptions.Operation = "PublicGeneralManagementApi.HttpTriggerDurableContinue";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AgravityInfoResponse>("/durable/{instanceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HttpTriggerDurableContinue", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Trigger the durable execution to continue
        /// </summary>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">The instance ID of the durable function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgravityInfoResponse</returns>
        public async System.Threading.Tasks.Task<AgravityInfoResponse> HttpTriggerDurableContinueAsync(string instanceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Agravity.Public.Client.ApiResponse<AgravityInfoResponse> localVarResponse = await HttpTriggerDurableContinueWithHttpInfoAsync(instanceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Trigger the durable execution to continue
        /// </summary>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">The instance ID of the durable function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgravityInfoResponse)</returns>
        public async System.Threading.Tasks.Task<Agravity.Public.Client.ApiResponse<AgravityInfoResponse>> HttpTriggerDurableContinueWithHttpInfoAsync(string instanceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new Agravity.Public.Client.ApiException(400, "Missing required parameter 'instanceId' when calling PublicGeneralManagementApi->HttpTriggerDurableContinue");
            }


            Agravity.Public.Client.RequestOptions localVarRequestOptions = new Agravity.Public.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Agravity.Public.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Agravity.Public.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instanceId", Agravity.Public.Client.ClientUtils.ParameterToString(instanceId)); // path parameter

            localVarRequestOptions.Operation = "PublicGeneralManagementApi.HttpTriggerDurableContinue";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AgravityInfoResponse>("/durable/{instanceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HttpTriggerDurableContinue", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Trigger the durable execution to continue
        /// </summary>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">The instance ID of the durable function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AgravityInfoResponse</returns>
        public AgravityInfoResponse HttpTriggerDurableScchTrainingDone(string instanceId, int operationIndex = 0)
        {
            Agravity.Public.Client.ApiResponse<AgravityInfoResponse> localVarResponse = HttpTriggerDurableScchTrainingDoneWithHttpInfo(instanceId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Trigger the durable execution to continue
        /// </summary>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">The instance ID of the durable function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AgravityInfoResponse</returns>
        public Agravity.Public.Client.ApiResponse<AgravityInfoResponse> HttpTriggerDurableScchTrainingDoneWithHttpInfo(string instanceId, int operationIndex = 0)
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new Agravity.Public.Client.ApiException(400, "Missing required parameter 'instanceId' when calling PublicGeneralManagementApi->HttpTriggerDurableScchTrainingDone");
            }

            Agravity.Public.Client.RequestOptions localVarRequestOptions = new Agravity.Public.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Agravity.Public.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Agravity.Public.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instanceId", Agravity.Public.Client.ClientUtils.ParameterToString(instanceId)); // path parameter

            localVarRequestOptions.Operation = "PublicGeneralManagementApi.HttpTriggerDurableScchTrainingDone";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AgravityInfoResponse>("/durable/scch/{instanceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HttpTriggerDurableScchTrainingDone", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Trigger the durable execution to continue
        /// </summary>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">The instance ID of the durable function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgravityInfoResponse</returns>
        public async System.Threading.Tasks.Task<AgravityInfoResponse> HttpTriggerDurableScchTrainingDoneAsync(string instanceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Agravity.Public.Client.ApiResponse<AgravityInfoResponse> localVarResponse = await HttpTriggerDurableScchTrainingDoneWithHttpInfoAsync(instanceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Trigger the durable execution to continue
        /// </summary>
        /// <exception cref="Agravity.Public.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">The instance ID of the durable function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgravityInfoResponse)</returns>
        public async System.Threading.Tasks.Task<Agravity.Public.Client.ApiResponse<AgravityInfoResponse>> HttpTriggerDurableScchTrainingDoneWithHttpInfoAsync(string instanceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new Agravity.Public.Client.ApiException(400, "Missing required parameter 'instanceId' when calling PublicGeneralManagementApi->HttpTriggerDurableScchTrainingDone");
            }


            Agravity.Public.Client.RequestOptions localVarRequestOptions = new Agravity.Public.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Agravity.Public.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Agravity.Public.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instanceId", Agravity.Public.Client.ClientUtils.ParameterToString(instanceId)); // path parameter

            localVarRequestOptions.Operation = "PublicGeneralManagementApi.HttpTriggerDurableScchTrainingDone";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AgravityInfoResponse>("/durable/scch/{instanceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HttpTriggerDurableScchTrainingDone", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
