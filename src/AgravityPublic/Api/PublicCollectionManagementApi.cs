/*
 * Agravity OpenAPI Documentation - Public Functions
 *
 * <h1>Agravity API Reference</h1>This is the public API description of Agravity GmbH.<br/><h2>Resources</h2><ul> <li>Collection type management</li> <li>Collections management</li> <li>Assets management</li> <li>Assets operations</li> <li>Assets publishing</li> <li>Collection Sharing (consume share)</li> <li>Secure Upload (validate + upload file)</li> <li>Download ZIP</li> <li>Search</li> <li>General management</li></ul><h2> Operations</h2>Agravity API performs the following operations:<ul> <li>List / get single collection types</li> <li>List / get single collections</li> <li>List / get single  assets</li> <li>Operations on assets like: blobs, rotate, resize, similar, collections, customfields, download</li> <li>List / get single published asset</li> <li>Search for assets or collections</li> <li>Get version of deployment</li></ul><br/><b>API key is needed to access these endpoints.</b><br/><br/>Copyright Â© Agravity GmbH 2022. All Rights Reserved
 *
 * The version of the OpenAPI document: 4.7.2
 * Contact: office@agravity.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using AgravityPublic.Client;
using AgravityPublic.Model;

namespace AgravityPublic.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPublicCollectionManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint creates a unique collection ID and adds the information to the database.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectiontypeid">The ID of the collection type where this collections should be assigned.</param>
        /// <param name="collection">This endpoint creates a unique collection ID and adds the information to the database.</param>
        /// <returns>Collection</returns>
        Collection HttpCollectionsCreate(string collectiontypeid, Collection collection);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint creates a unique collection ID and adds the information to the database.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectiontypeid">The ID of the collection type where this collections should be assigned.</param>
        /// <param name="collection">This endpoint creates a unique collection ID and adds the information to the database.</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> HttpCollectionsCreateWithHttpInfo(string collectiontypeid, Collection collection);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This lists all the collections which are stored in the database and not deleted (status \"A\"). This will include all specific properties from collection type.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectiontypeid">The ID of the collection type where these collections should come from.</param>
        /// <param name="level">The hierarchy level of collections which should be returned. (optional)</param>
        /// <param name="parentid">The ID of the parent collection which should be queried. (No collectiontypeid is required) (optional)</param>
        /// <param name="fields">This limits the fields which are returned, separated by comma (&#39;,&#39;). (optional)</param>
        /// <returns>List<Collection></returns>
        List<Collection> HttpCollectionsGet(string collectiontypeid, int? level = default(int?), string parentid = default(string), string fields = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This lists all the collections which are stored in the database and not deleted (status \"A\"). This will include all specific properties from collection type.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectiontypeid">The ID of the collection type where these collections should come from.</param>
        /// <param name="level">The hierarchy level of collections which should be returned. (optional)</param>
        /// <param name="parentid">The ID of the parent collection which should be queried. (No collectiontypeid is required) (optional)</param>
        /// <param name="fields">This limits the fields which are returned, separated by comma (&#39;,&#39;). (optional)</param>
        /// <returns>ApiResponse of List<Collection></returns>
        ApiResponse<List<Collection>> HttpCollectionsGetWithHttpInfo(string collectiontypeid, int? level = default(int?), string parentid = default(string), string fields = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one single collection (from ID). This will include all specific properties from collection type.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="fields">This limits the fields which are returned, separated by comma (&#39;,&#39;). (optional)</param>
        /// <returns>Collection</returns>
        Collection HttpCollectionsGetById(string id, string fields = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one single collection (from ID). This will include all specific properties from collection type.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="fields">This limits the fields which are returned, separated by comma (&#39;,&#39;). (optional)</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> HttpCollectionsGetByIdWithHttpInfo(string id, string fields = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the complete tree of descendants from a single collection.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <returns>List<Collection></returns>
        List<Collection> HttpCollectionsGetDescendantsTreeOfId(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the complete tree of descendants from a single collection.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <returns>ApiResponse of List<Collection></returns>
        ApiResponse<List<Collection>> HttpCollectionsGetDescendantsTreeOfIdWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the complete tree of ancestors from a single collection.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <returns>List<Collection></returns>
        List<Collection> HttpCollectionsGetTreeAncestorsOfId(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the complete tree of ancestors from a single collection.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <returns>ApiResponse of List<Collection></returns>
        ApiResponse<List<Collection>> HttpCollectionsGetTreeAncestorsOfIdWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint returns a generated thumbnail as a preview of the containing assets.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <returns>string</returns>
        string HttpGetCollectionPreviewsById(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint returns a generated thumbnail as a preview of the containing assets.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> HttpGetCollectionPreviewsByIdWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint updates the collection. Specific properties could be updated.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="collection">The body has to be a valid collection json.Not fitting properties are ignored.</param>
        /// <returns>Collection</returns>
        Collection HttpPublicCollectionsUpdateById(string id, Collection collection);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint updates the collection. Specific properties could be updated.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="collection">The body has to be a valid collection json.Not fitting properties are ignored.</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> HttpPublicCollectionsUpdateByIdWithHttpInfo(string id, Collection collection);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint creates a unique collection ID and adds the information to the database.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectiontypeid">The ID of the collection type where this collections should be assigned.</param>
        /// <param name="collection">This endpoint creates a unique collection ID and adds the information to the database.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> HttpCollectionsCreateAsync(string collectiontypeid, Collection collection, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint creates a unique collection ID and adds the information to the database.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectiontypeid">The ID of the collection type where this collections should be assigned.</param>
        /// <param name="collection">This endpoint creates a unique collection ID and adds the information to the database.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> HttpCollectionsCreateWithHttpInfoAsync(string collectiontypeid, Collection collection, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This lists all the collections which are stored in the database and not deleted (status \"A\"). This will include all specific properties from collection type.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectiontypeid">The ID of the collection type where these collections should come from.</param>
        /// <param name="level">The hierarchy level of collections which should be returned. (optional)</param>
        /// <param name="parentid">The ID of the parent collection which should be queried. (No collectiontypeid is required) (optional)</param>
        /// <param name="fields">This limits the fields which are returned, separated by comma (&#39;,&#39;). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Collection></returns>
        System.Threading.Tasks.Task<List<Collection>> HttpCollectionsGetAsync(string collectiontypeid, int? level = default(int?), string parentid = default(string), string fields = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This lists all the collections which are stored in the database and not deleted (status \"A\"). This will include all specific properties from collection type.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectiontypeid">The ID of the collection type where these collections should come from.</param>
        /// <param name="level">The hierarchy level of collections which should be returned. (optional)</param>
        /// <param name="parentid">The ID of the parent collection which should be queried. (No collectiontypeid is required) (optional)</param>
        /// <param name="fields">This limits the fields which are returned, separated by comma (&#39;,&#39;). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Collection>>> HttpCollectionsGetWithHttpInfoAsync(string collectiontypeid, int? level = default(int?), string parentid = default(string), string fields = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one single collection (from ID). This will include all specific properties from collection type.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="fields">This limits the fields which are returned, separated by comma (&#39;,&#39;). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> HttpCollectionsGetByIdAsync(string id, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one single collection (from ID). This will include all specific properties from collection type.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="fields">This limits the fields which are returned, separated by comma (&#39;,&#39;). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> HttpCollectionsGetByIdWithHttpInfoAsync(string id, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the complete tree of descendants from a single collection.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Collection></returns>
        System.Threading.Tasks.Task<List<Collection>> HttpCollectionsGetDescendantsTreeOfIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the complete tree of descendants from a single collection.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Collection>>> HttpCollectionsGetDescendantsTreeOfIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the complete tree of ancestors from a single collection.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Collection></returns>
        System.Threading.Tasks.Task<List<Collection>> HttpCollectionsGetTreeAncestorsOfIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the complete tree of ancestors from a single collection.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Collection>>> HttpCollectionsGetTreeAncestorsOfIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint returns a generated thumbnail as a preview of the containing assets.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> HttpGetCollectionPreviewsByIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint returns a generated thumbnail as a preview of the containing assets.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> HttpGetCollectionPreviewsByIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint updates the collection. Specific properties could be updated.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="collection">The body has to be a valid collection json.Not fitting properties are ignored.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> HttpPublicCollectionsUpdateByIdAsync(string id, Collection collection, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint updates the collection. Specific properties could be updated.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="collection">The body has to be a valid collection json.Not fitting properties are ignored.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> HttpPublicCollectionsUpdateByIdWithHttpInfoAsync(string id, Collection collection, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PublicCollectionManagementApi : IPublicCollectionManagementApi
    {
        private AgravityPublic.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicCollectionManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PublicCollectionManagementApi(String basePath)
        {
            this.Configuration = new AgravityPublic.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AgravityPublic.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicCollectionManagementApi"/> class
        /// </summary>
        /// <returns></returns>
        public PublicCollectionManagementApi()
        {
            this.Configuration = AgravityPublic.Client.Configuration.Default;

            ExceptionFactory = AgravityPublic.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicCollectionManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PublicCollectionManagementApi(AgravityPublic.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AgravityPublic.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AgravityPublic.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AgravityPublic.Client.Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AgravityPublic.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  This endpoint creates a unique collection ID and adds the information to the database.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectiontypeid">The ID of the collection type where this collections should be assigned.</param>
        /// <param name="collection">This endpoint creates a unique collection ID and adds the information to the database.</param>
        /// <returns>Collection</returns>
        public Collection HttpCollectionsCreate(string collectiontypeid, Collection collection)
        {
            ApiResponse<Collection> localVarResponse = HttpCollectionsCreateWithHttpInfo(collectiontypeid, collection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  This endpoint creates a unique collection ID and adds the information to the database.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectiontypeid">The ID of the collection type where this collections should be assigned.</param>
        /// <param name="collection">This endpoint creates a unique collection ID and adds the information to the database.</param>
        /// <returns>ApiResponse of Collection</returns>
        public ApiResponse<Collection> HttpCollectionsCreateWithHttpInfo(string collectiontypeid, Collection collection)
        {
            // verify the required parameter 'collectiontypeid' is set
            if (collectiontypeid == null)
                throw new ApiException(400, "Missing required parameter 'collectiontypeid' when calling PublicCollectionManagementApi->HttpCollectionsCreate");
            // verify the required parameter 'collection' is set
            if (collection == null)
                throw new ApiException(400, "Missing required parameter 'collection' when calling PublicCollectionManagementApi->HttpCollectionsCreate");

            var localVarPath = "/collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectiontypeid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "collectiontypeid", collectiontypeid)); // query parameter
            if (collection != null && collection.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(collection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = collection; // byte array
            }

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpCollectionsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection)));
        }

        /// <summary>
        ///  This endpoint creates a unique collection ID and adds the information to the database.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectiontypeid">The ID of the collection type where this collections should be assigned.</param>
        /// <param name="collection">This endpoint creates a unique collection ID and adds the information to the database.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> HttpCollectionsCreateAsync(string collectiontypeid, Collection collection, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<Collection> localVarResponse = await HttpCollectionsCreateWithHttpInfoAsync(collectiontypeid, collection, cancellationToken);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  This endpoint creates a unique collection ID and adds the information to the database.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectiontypeid">The ID of the collection type where this collections should be assigned.</param>
        /// <param name="collection">This endpoint creates a unique collection ID and adds the information to the database.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Collection>> HttpCollectionsCreateWithHttpInfoAsync(string collectiontypeid, Collection collection, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'collectiontypeid' is set
            if (collectiontypeid == null)
                throw new ApiException(400, "Missing required parameter 'collectiontypeid' when calling PublicCollectionManagementApi->HttpCollectionsCreate");
            // verify the required parameter 'collection' is set
            if (collection == null)
                throw new ApiException(400, "Missing required parameter 'collection' when calling PublicCollectionManagementApi->HttpCollectionsCreate");

            var localVarPath = "/collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectiontypeid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "collectiontypeid", collectiontypeid)); // query parameter
            if (collection != null && collection.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(collection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = collection; // byte array
            }

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpCollectionsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection)));
        }

        /// <summary>
        ///  This lists all the collections which are stored in the database and not deleted (status \"A\"). This will include all specific properties from collection type.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectiontypeid">The ID of the collection type where these collections should come from.</param>
        /// <param name="level">The hierarchy level of collections which should be returned. (optional)</param>
        /// <param name="parentid">The ID of the parent collection which should be queried. (No collectiontypeid is required) (optional)</param>
        /// <param name="fields">This limits the fields which are returned, separated by comma (&#39;,&#39;). (optional)</param>
        /// <returns>List<Collection></returns>
        public List<Collection> HttpCollectionsGet(string collectiontypeid, int? level = default(int?), string parentid = default(string), string fields = default(string))
        {
            ApiResponse<List<Collection>> localVarResponse = HttpCollectionsGetWithHttpInfo(collectiontypeid, level, parentid, fields);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  This lists all the collections which are stored in the database and not deleted (status \"A\"). This will include all specific properties from collection type.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectiontypeid">The ID of the collection type where these collections should come from.</param>
        /// <param name="level">The hierarchy level of collections which should be returned. (optional)</param>
        /// <param name="parentid">The ID of the parent collection which should be queried. (No collectiontypeid is required) (optional)</param>
        /// <param name="fields">This limits the fields which are returned, separated by comma (&#39;,&#39;). (optional)</param>
        /// <returns>ApiResponse of List<Collection></returns>
        public ApiResponse<List<Collection>> HttpCollectionsGetWithHttpInfo(string collectiontypeid, int? level = default(int?), string parentid = default(string), string fields = default(string))
        {
            // verify the required parameter 'collectiontypeid' is set
            if (collectiontypeid == null)
                throw new ApiException(400, "Missing required parameter 'collectiontypeid' when calling PublicCollectionManagementApi->HttpCollectionsGet");

            var localVarPath = "/collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectiontypeid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "collectiontypeid", collectiontypeid)); // query parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (parentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentid", parentid)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpCollectionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Collection>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Collection>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Collection>)));
        }

        /// <summary>
        ///  This lists all the collections which are stored in the database and not deleted (status \"A\"). This will include all specific properties from collection type.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectiontypeid">The ID of the collection type where these collections should come from.</param>
        /// <param name="level">The hierarchy level of collections which should be returned. (optional)</param>
        /// <param name="parentid">The ID of the parent collection which should be queried. (No collectiontypeid is required) (optional)</param>
        /// <param name="fields">This limits the fields which are returned, separated by comma (&#39;,&#39;). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Collection></returns>
        public async System.Threading.Tasks.Task<List<Collection>> HttpCollectionsGetAsync(string collectiontypeid, int? level = default(int?), string parentid = default(string), string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<List<Collection>> localVarResponse = await HttpCollectionsGetWithHttpInfoAsync(collectiontypeid, level, parentid, fields, cancellationToken);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  This lists all the collections which are stored in the database and not deleted (status \"A\"). This will include all specific properties from collection type.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectiontypeid">The ID of the collection type where these collections should come from.</param>
        /// <param name="level">The hierarchy level of collections which should be returned. (optional)</param>
        /// <param name="parentid">The ID of the parent collection which should be queried. (No collectiontypeid is required) (optional)</param>
        /// <param name="fields">This limits the fields which are returned, separated by comma (&#39;,&#39;). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Collection>>> HttpCollectionsGetWithHttpInfoAsync(string collectiontypeid, int? level = default(int?), string parentid = default(string), string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'collectiontypeid' is set
            if (collectiontypeid == null)
                throw new ApiException(400, "Missing required parameter 'collectiontypeid' when calling PublicCollectionManagementApi->HttpCollectionsGet");

            var localVarPath = "/collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectiontypeid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "collectiontypeid", collectiontypeid)); // query parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (parentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentid", parentid)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpCollectionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Collection>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Collection>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Collection>)));
        }

        /// <summary>
        ///  Returns one single collection (from ID). This will include all specific properties from collection type.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="fields">This limits the fields which are returned, separated by comma (&#39;,&#39;). (optional)</param>
        /// <returns>Collection</returns>
        public Collection HttpCollectionsGetById(string id, string fields = default(string))
        {
            ApiResponse<Collection> localVarResponse = HttpCollectionsGetByIdWithHttpInfo(id, fields);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns one single collection (from ID). This will include all specific properties from collection type.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="fields">This limits the fields which are returned, separated by comma (&#39;,&#39;). (optional)</param>
        /// <returns>ApiResponse of Collection</returns>
        public ApiResponse<Collection> HttpCollectionsGetByIdWithHttpInfo(string id, string fields = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicCollectionManagementApi->HttpCollectionsGetById");

            var localVarPath = "/collections/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpCollectionsGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection)));
        }

        /// <summary>
        ///  Returns one single collection (from ID). This will include all specific properties from collection type.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="fields">This limits the fields which are returned, separated by comma (&#39;,&#39;). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> HttpCollectionsGetByIdAsync(string id, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<Collection> localVarResponse = await HttpCollectionsGetByIdWithHttpInfoAsync(id, fields, cancellationToken);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns one single collection (from ID). This will include all specific properties from collection type.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="fields">This limits the fields which are returned, separated by comma (&#39;,&#39;). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Collection>> HttpCollectionsGetByIdWithHttpInfoAsync(string id, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicCollectionManagementApi->HttpCollectionsGetById");

            var localVarPath = "/collections/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpCollectionsGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection)));
        }

        /// <summary>
        ///  Get the complete tree of descendants from a single collection.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <returns>List<Collection></returns>
        public List<Collection> HttpCollectionsGetDescendantsTreeOfId(string id)
        {
            ApiResponse<List<Collection>> localVarResponse = HttpCollectionsGetDescendantsTreeOfIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the complete tree of descendants from a single collection.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <returns>ApiResponse of List<Collection></returns>
        public ApiResponse<List<Collection>> HttpCollectionsGetDescendantsTreeOfIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicCollectionManagementApi->HttpCollectionsGetDescendantsTreeOfId");

            var localVarPath = "/collections/{id}/descendants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpCollectionsGetDescendantsTreeOfId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Collection>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Collection>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Collection>)));
        }

        /// <summary>
        ///  Get the complete tree of descendants from a single collection.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Collection></returns>
        public async System.Threading.Tasks.Task<List<Collection>> HttpCollectionsGetDescendantsTreeOfIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<List<Collection>> localVarResponse = await HttpCollectionsGetDescendantsTreeOfIdWithHttpInfoAsync(id, cancellationToken);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the complete tree of descendants from a single collection.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Collection>>> HttpCollectionsGetDescendantsTreeOfIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicCollectionManagementApi->HttpCollectionsGetDescendantsTreeOfId");

            var localVarPath = "/collections/{id}/descendants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpCollectionsGetDescendantsTreeOfId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Collection>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Collection>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Collection>)));
        }

        /// <summary>
        ///  Get the complete tree of ancestors from a single collection.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <returns>List<Collection></returns>
        public List<Collection> HttpCollectionsGetTreeAncestorsOfId(string id)
        {
            ApiResponse<List<Collection>> localVarResponse = HttpCollectionsGetTreeAncestorsOfIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the complete tree of ancestors from a single collection.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <returns>ApiResponse of List<Collection></returns>
        public ApiResponse<List<Collection>> HttpCollectionsGetTreeAncestorsOfIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicCollectionManagementApi->HttpCollectionsGetTreeAncestorsOfId");

            var localVarPath = "/collections/{id}/ancestors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpCollectionsGetTreeAncestorsOfId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Collection>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Collection>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Collection>)));
        }

        /// <summary>
        ///  Get the complete tree of ancestors from a single collection.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Collection></returns>
        public async System.Threading.Tasks.Task<List<Collection>> HttpCollectionsGetTreeAncestorsOfIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<List<Collection>> localVarResponse = await HttpCollectionsGetTreeAncestorsOfIdWithHttpInfoAsync(id, cancellationToken);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the complete tree of ancestors from a single collection.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Collection>>> HttpCollectionsGetTreeAncestorsOfIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicCollectionManagementApi->HttpCollectionsGetTreeAncestorsOfId");

            var localVarPath = "/collections/{id}/ancestors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpCollectionsGetTreeAncestorsOfId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Collection>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Collection>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Collection>)));
        }

        /// <summary>
        ///  This endpoint returns a generated thumbnail as a preview of the containing assets.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <returns>string</returns>
        public string HttpGetCollectionPreviewsById(string id)
        {
            ApiResponse<string> localVarResponse = HttpGetCollectionPreviewsByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  This endpoint returns a generated thumbnail as a preview of the containing assets.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> HttpGetCollectionPreviewsByIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicCollectionManagementApi->HttpGetCollectionPreviewsById");

            var localVarPath = "/collections/{id}/previews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpGetCollectionPreviewsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  This endpoint returns a generated thumbnail as a preview of the containing assets.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> HttpGetCollectionPreviewsByIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<string> localVarResponse = await HttpGetCollectionPreviewsByIdWithHttpInfoAsync(id, cancellationToken);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  This endpoint returns a generated thumbnail as a preview of the containing assets.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> HttpGetCollectionPreviewsByIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicCollectionManagementApi->HttpGetCollectionPreviewsById");

            var localVarPath = "/collections/{id}/previews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpGetCollectionPreviewsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  This endpoint updates the collection. Specific properties could be updated.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="collection">The body has to be a valid collection json.Not fitting properties are ignored.</param>
        /// <returns>Collection</returns>
        public Collection HttpPublicCollectionsUpdateById(string id, Collection collection)
        {
            ApiResponse<Collection> localVarResponse = HttpPublicCollectionsUpdateByIdWithHttpInfo(id, collection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  This endpoint updates the collection. Specific properties could be updated.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="collection">The body has to be a valid collection json.Not fitting properties are ignored.</param>
        /// <returns>ApiResponse of Collection</returns>
        public ApiResponse<Collection> HttpPublicCollectionsUpdateByIdWithHttpInfo(string id, Collection collection)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicCollectionManagementApi->HttpPublicCollectionsUpdateById");
            // verify the required parameter 'collection' is set
            if (collection == null)
                throw new ApiException(400, "Missing required parameter 'collection' when calling PublicCollectionManagementApi->HttpPublicCollectionsUpdateById");

            var localVarPath = "/collections/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (collection != null && collection.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(collection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = collection; // byte array
            }

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpPublicCollectionsUpdateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection)));
        }

        /// <summary>
        ///  This endpoint updates the collection. Specific properties could be updated.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="collection">The body has to be a valid collection json.Not fitting properties are ignored.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> HttpPublicCollectionsUpdateByIdAsync(string id, Collection collection, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<Collection> localVarResponse = await HttpPublicCollectionsUpdateByIdWithHttpInfoAsync(id, collection, cancellationToken);
            return localVarResponse.Data;

        }

        /// <summary>
        ///  This endpoint updates the collection. Specific properties could be updated.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the collection.</param>
        /// <param name="collection">The body has to be a valid collection json.Not fitting properties are ignored.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Collection>> HttpPublicCollectionsUpdateByIdWithHttpInfoAsync(string id, Collection collection, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicCollectionManagementApi->HttpPublicCollectionsUpdateById");
            // verify the required parameter 'collection' is set
            if (collection == null)
                throw new ApiException(400, "Missing required parameter 'collection' when calling PublicCollectionManagementApi->HttpPublicCollectionsUpdateById");

            var localVarPath = "/collections/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (collection != null && collection.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(collection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = collection; // byte array
            }

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpPublicCollectionsUpdateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Collection)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collection)));
        }

    }
}
