/*
 * Agravity OpenAPI Documentation - Public Functions
 *
 * <h1>Agravity API Reference</h1>This is the public API description of Agravity GmbH.<br/><h2>Resources</h2><ul> <li>Collection type management</li> <li>Collections management</li> <li>Assets management</li> <li>Assets operations</li> <li>Assets publishing</li> <li>Collection Sharing (consume share)</li> <li>Secure Upload (validate + upload file)</li> <li>Download ZIP</li> <li>Search</li> <li>General management</li></ul><h2> Operations</h2>Agravity API performs the following operations:<ul> <li>List / get single collection types</li> <li>List / get single collections</li> <li>List / get single  assets</li> <li>Operations on assets like: blobs, rotate, resize, similar, collections, customfields, download</li> <li>List / get single published asset</li> <li>Search for assets or collections</li> <li>Get version of deployment</li></ul><br/><b>API key is needed to access these endpoints.</b><br/><br/>Copyright Â© Agravity GmbH 2022. All Rights Reserved
 *
 * The version of the OpenAPI document: 4.7.1
 * Contact: office@agravity.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using AgravityPublic.Client;
using AgravityPublic.Model;

namespace AgravityPublic.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPublicCollectionSecureUploadApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searchs for one single secure upload entity of an user and returns simple OK if found.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the secure upload collection.</param>
        /// <param name="code">The API key to access this endpoint. (Alternative using header x-function-keys with same value)</param>
        /// <returns>SecureUploadEntity</returns>
        SecureUploadEntity HttpSecureUploadEntityCheckById (string id, string code);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searchs for one single secure upload entity of an user and returns simple OK if found.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the secure upload collection.</param>
        /// <param name="code">The API key to access this endpoint. (Alternative using header x-function-keys with same value)</param>
        /// <returns>ApiResponse of SecureUploadEntity</returns>
        ApiResponse<SecureUploadEntity> HttpSecureUploadEntityCheckByIdWithHttpInfo (string id, string code);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint allows to securly upload one asset which is put onto the storage (INBOX). Object has to be FormData (Add file).
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the secure upload collection.</param>
        /// <param name="code">The API key to access this endpoint. (Alternative using header x-function-keys with same value)</param>
        /// <param name="body">This endpoint allows to upload one asset which is put onto the storage (INBOX). Object has to be FormData (Add file).</param>
        /// <returns>Asset</returns>
        Asset HttpSecureUploadFileById (string id, string code, Object body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint allows to securly upload one asset which is put onto the storage (INBOX). Object has to be FormData (Add file).
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the secure upload collection.</param>
        /// <param name="code">The API key to access this endpoint. (Alternative using header x-function-keys with same value)</param>
        /// <param name="body">This endpoint allows to upload one asset which is put onto the storage (INBOX). Object has to be FormData (Add file).</param>
        /// <returns>ApiResponse of Asset</returns>
        ApiResponse<Asset> HttpSecureUploadFileByIdWithHttpInfo (string id, string code, Object body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searchs for one single secure upload entity of an user and returns simple OK if found.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the secure upload collection.</param>
        /// <param name="code">The API key to access this endpoint. (Alternative using header x-function-keys with same value)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SecureUploadEntity</returns>
        System.Threading.Tasks.Task<SecureUploadEntity> HttpSecureUploadEntityCheckByIdAsync (string id, string code, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searchs for one single secure upload entity of an user and returns simple OK if found.
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the secure upload collection.</param>
        /// <param name="code">The API key to access this endpoint. (Alternative using header x-function-keys with same value)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SecureUploadEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecureUploadEntity>> HttpSecureUploadEntityCheckByIdWithHttpInfoAsync (string id, string code, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint allows to securly upload one asset which is put onto the storage (INBOX). Object has to be FormData (Add file).
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the secure upload collection.</param>
        /// <param name="code">The API key to access this endpoint. (Alternative using header x-function-keys with same value)</param>
        /// <param name="body">This endpoint allows to upload one asset which is put onto the storage (INBOX). Object has to be FormData (Add file).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Asset</returns>
        System.Threading.Tasks.Task<Asset> HttpSecureUploadFileByIdAsync (string id, string code, Object body, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint allows to securly upload one asset which is put onto the storage (INBOX). Object has to be FormData (Add file).
        /// </remarks>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the secure upload collection.</param>
        /// <param name="code">The API key to access this endpoint. (Alternative using header x-function-keys with same value)</param>
        /// <param name="body">This endpoint allows to upload one asset which is put onto the storage (INBOX). Object has to be FormData (Add file).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Asset>> HttpSecureUploadFileByIdWithHttpInfoAsync (string id, string code, Object body, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PublicCollectionSecureUploadApi : IPublicCollectionSecureUploadApi
    {
        private AgravityPublic.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicCollectionSecureUploadApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PublicCollectionSecureUploadApi(String basePath)
        {
            this.Configuration = new AgravityPublic.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AgravityPublic.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicCollectionSecureUploadApi"/> class
        /// </summary>
        /// <returns></returns>
        public PublicCollectionSecureUploadApi()
        {
            this.Configuration = AgravityPublic.Client.Configuration.Default;

            ExceptionFactory = AgravityPublic.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicCollectionSecureUploadApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PublicCollectionSecureUploadApi(AgravityPublic.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AgravityPublic.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AgravityPublic.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AgravityPublic.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AgravityPublic.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Searchs for one single secure upload entity of an user and returns simple OK if found.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the secure upload collection.</param>
        /// <param name="code">The API key to access this endpoint. (Alternative using header x-function-keys with same value)</param>
        /// <returns>SecureUploadEntity</returns>
        public SecureUploadEntity HttpSecureUploadEntityCheckById (string id, string code)
        {
             ApiResponse<SecureUploadEntity> localVarResponse = HttpSecureUploadEntityCheckByIdWithHttpInfo(id, code);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Searchs for one single secure upload entity of an user and returns simple OK if found.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the secure upload collection.</param>
        /// <param name="code">The API key to access this endpoint. (Alternative using header x-function-keys with same value)</param>
        /// <returns>ApiResponse of SecureUploadEntity</returns>
        public ApiResponse<SecureUploadEntity> HttpSecureUploadEntityCheckByIdWithHttpInfo (string id, string code)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicCollectionSecureUploadApi->HttpSecureUploadEntityCheckById");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PublicCollectionSecureUploadApi->HttpSecureUploadEntityCheckById");

            var localVarPath = "/secureupload/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpSecureUploadEntityCheckById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecureUploadEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SecureUploadEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecureUploadEntity)));
        }

        /// <summary>
        ///  Searchs for one single secure upload entity of an user and returns simple OK if found.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the secure upload collection.</param>
        /// <param name="code">The API key to access this endpoint. (Alternative using header x-function-keys with same value)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SecureUploadEntity</returns>
        public async System.Threading.Tasks.Task<SecureUploadEntity> HttpSecureUploadEntityCheckByIdAsync (string id, string code, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SecureUploadEntity> localVarResponse = await HttpSecureUploadEntityCheckByIdWithHttpInfoAsync(id, code, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Searchs for one single secure upload entity of an user and returns simple OK if found.
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the secure upload collection.</param>
        /// <param name="code">The API key to access this endpoint. (Alternative using header x-function-keys with same value)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SecureUploadEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecureUploadEntity>> HttpSecureUploadEntityCheckByIdWithHttpInfoAsync (string id, string code, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicCollectionSecureUploadApi->HttpSecureUploadEntityCheckById");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PublicCollectionSecureUploadApi->HttpSecureUploadEntityCheckById");

            var localVarPath = "/secureupload/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpSecureUploadEntityCheckById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecureUploadEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SecureUploadEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecureUploadEntity)));
        }

        /// <summary>
        ///  This endpoint allows to securly upload one asset which is put onto the storage (INBOX). Object has to be FormData (Add file).
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the secure upload collection.</param>
        /// <param name="code">The API key to access this endpoint. (Alternative using header x-function-keys with same value)</param>
        /// <param name="body">This endpoint allows to upload one asset which is put onto the storage (INBOX). Object has to be FormData (Add file).</param>
        /// <returns>Asset</returns>
        public Asset HttpSecureUploadFileById (string id, string code, Object body)
        {
             ApiResponse<Asset> localVarResponse = HttpSecureUploadFileByIdWithHttpInfo(id, code, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This endpoint allows to securly upload one asset which is put onto the storage (INBOX). Object has to be FormData (Add file).
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the secure upload collection.</param>
        /// <param name="code">The API key to access this endpoint. (Alternative using header x-function-keys with same value)</param>
        /// <param name="body">This endpoint allows to upload one asset which is put onto the storage (INBOX). Object has to be FormData (Add file).</param>
        /// <returns>ApiResponse of Asset</returns>
        public ApiResponse<Asset> HttpSecureUploadFileByIdWithHttpInfo (string id, string code, Object body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicCollectionSecureUploadApi->HttpSecureUploadFileById");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PublicCollectionSecureUploadApi->HttpSecureUploadFileById");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PublicCollectionSecureUploadApi->HttpSecureUploadFileById");

            var localVarPath = "/secureupload/{id}/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpSecureUploadFileById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Asset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Asset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Asset)));
        }

        /// <summary>
        ///  This endpoint allows to securly upload one asset which is put onto the storage (INBOX). Object has to be FormData (Add file).
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the secure upload collection.</param>
        /// <param name="code">The API key to access this endpoint. (Alternative using header x-function-keys with same value)</param>
        /// <param name="body">This endpoint allows to upload one asset which is put onto the storage (INBOX). Object has to be FormData (Add file).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Asset</returns>
        public async System.Threading.Tasks.Task<Asset> HttpSecureUploadFileByIdAsync (string id, string code, Object body, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Asset> localVarResponse = await HttpSecureUploadFileByIdWithHttpInfoAsync(id, code, body, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This endpoint allows to securly upload one asset which is put onto the storage (INBOX). Object has to be FormData (Add file).
        /// </summary>
        /// <exception cref="AgravityPublic.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the secure upload collection.</param>
        /// <param name="code">The API key to access this endpoint. (Alternative using header x-function-keys with same value)</param>
        /// <param name="body">This endpoint allows to upload one asset which is put onto the storage (INBOX). Object has to be FormData (Add file).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Asset>> HttpSecureUploadFileByIdWithHttpInfoAsync (string id, string code, Object body, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicCollectionSecureUploadApi->HttpSecureUploadFileById");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PublicCollectionSecureUploadApi->HttpSecureUploadFileById");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PublicCollectionSecureUploadApi->HttpSecureUploadFileById");

            var localVarPath = "/secureupload/{id}/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (function_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-functions-key")))
            {
                localVarHeaderParams["x-functions-key"] = this.Configuration.GetApiKeyWithPrefix("x-functions-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpSecureUploadFileById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Asset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Asset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Asset)));
        }

    }
}
